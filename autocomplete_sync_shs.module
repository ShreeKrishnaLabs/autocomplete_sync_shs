<?php
/**
 *  @info
 *  Implementation of Auto Suggest feature synced with SHS to show only 3rd level terms 
 *
 */

/**
 * Implements hook_menu().
 */
function autocomplete_sync_shs_menu() {
  $items = array();

  if (module_exists('taxonomy')) {
    $items['third-level-auto-suggest/autocomplete-taxonomy-term/%/%/%'] = array(
      'title' => 'Autocomplete Synonyms',
      'page callback' => 'autocomplete_sync_shs_autocomplete_taxonomy_term',
      'page arguments' => array(2, 3, 4),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  }
   $items['admin/config/autocomplete_sync_shs'] = array(
    'title' => 'Autocomplete Sync SHS configuration',
    'description' => 'Autocomplete Sync SHS configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autocomplete_sync_shs_admin_form'),
    'access arguments' => array('administer synonyms'),
    'file' => 'autocomplete_sync_shs.admin.inc',
  );
  return $items;
}

/**
 *  Implementation of hook_form_alter(&$form,&$form_state,$form_id)
 */
function autocomplete_sync_shs_form_alter(&$form,&$form_state,$form_id){
  $array_entity = isset($form['#entity']) ? (array) $form['#entity'] : NULL;
  //@todo to make it work for entities apart from node
  if (isset($form['#bundle']) && isset($form['#entity_type']) && $array_entity) {
    $add_autocomplete_to_shs = variable_get('add_autocomplete_to_shs',TRUE);
    $add_autocomplete_sync_keep_three_level_open = variable_get('add_autocomplete_sync_keep_three_level_open',TRUE);
    $entity_type = $form['#entity_type'];
    $node_type   = $form['#bundle'];
    $data= field_info_instances($entity_type,$node_type);
    $fields = array();
    foreach($data as $k => $v){
      $type = $v['widget']['type'];
      if ($type == 'taxonomy_shs'){
        $fields[] = $k; 
      }
    }
  if (isset($fields[0])){
  foreach($fields as $delta => $field_name){
    $shs_exists = $field_name;
    $form['field-name'] = array(
      '#type' => 'value',
      '#value'=> $field_name,
    );
    if($shs_exists && $add_autocomplete_to_shs) {
      //fieldset
      foreach($form[$field_name][LANGUAGE_NONE] as $key_1 => $value_1 ){
        if (is_numeric($key_1)){
          //widget-selection
         $widget_selection_bootstrap_class = variable_get('widget_selection_bootstrap_class','col-lg-12');
         $active = array(0 => t('Direct type in'), 1 => t('Choose from Kategorietree'));
         $form[$field_name][LANGUAGE_NONE][$key_1]['widget-selection'] = array(
           '#type' => 'radios',
           '#prefix' => t('<div class="container autocomplete-sync-panel-body row"><div class="'. $widget_selection_bootstrap_class .'"><div class="'.$widget_selection_bootstrap_class.'"><div class="autocomplete-sync-shs-title"><label>'.variable_get('autocomplete_sync_shs_title_widget_select',t('Please Select a Category')).'</label></div><br><div class="help-block">'.variable_get('autocomplete_sync_shs_checkbox_desc',t('')) .'</div></div>'),
           '#suffix' => t('</div>'),
           '#default_value' => (isset($form_state['values'][$field_name][LANGUAGE_NONE][$key_1]['widget-selection'])) ? 1 : 0,
           '#options' => $active,
           '#required' => TRUE,
           '#weight' => -7,
         );           
         $default_autocomplete = (isset($form['#node']) && isset($form['#node']->{$field_name}[LANGUAGE_NONE][0])) ? taxonomy_term_load($form['#node']->{$field_name}[LANGUAGE_NONE][$key_1]['tid'])->name : '';
         $widget = $field_name.'['.LANGUAGE_NONE.']'.'['.$key_1.']'.'[widget-selection]'; 
         $form[$field_name][LANGUAGE_NONE][$key_1]['autocomplete'] = array(
           '#title' => '',
           '#description' => '',
           '#type' => 'textfield',
           '#autocomplete_path' => 'third-level-auto-suggest/autocomplete-taxonomy-term/'.$field_name.'/'.$entity_type.'/' . $node_type ,
           '#states' => array(
           'disabled' => array(
             ':input[name="' . $widget . '"]' => array('value' => 1 ),
             ),
           ),
           '#prefix' => t('<div class="col-lg-6"><div class="autocomplete-sync-shs-title"><label>'.variable_get('autocomplete_sync_shs_autocomplete_headline',t()).'</label></div><div class="help-block">'.variable_get('autocomplete_sync_shs_autocomplete_info',t()).'</div>'),
           '#suffix' => t('</div>'),
           '#default_value' => $default_autocomplete,
           '#weight' => -4,
         );
         $form[$field_name][LANGUAGE_NONE][$key_1]['tid']['#prefix'] = '<div class="col-lg-6"><div class="title"><label>'.variable_get('autocomplete_sync_shs_headline_shs',t()).'</label></div><div class="help-block">'.variable_get('autocomplete_sync_shs_info_shs',t()).'</div>';
         $form[$field_name][LANGUAGE_NONE][$key_1]['tid']['#suffix'] = '</div></div>';
         $form[$field_name][LANGUAGE_NONE][$key_1]['tid']['#title'] = '';
         $form[$field_name][LANGUAGE_NONE][$key_1]['tid']['#states'] =  array(
           'disabled' => array(
             ':input[name="' . $widget . '"]' => array('value' => 0 ),
           ),
         );
       }
     }
    }
    $shs_select = variable_get('autocomplete_sync_shs_select_classes','col-lg-12');
    drupal_add_js(array('autocomplete_sync_shs' => array('shs_select' => $shs_select,'field_name'=>$field_name)), array('type' => 'setting'));
    $form['#attached']['js'][] = drupal_get_path('module','autocomplete_sync_shs').'/js/shs_bootstrap.js' ;
    $form['#validate'][] = 'autocomplete_sync_shs_autocomplete_shs_validate';
    $form['#submit'][] = 'autocomplete_sync_shs_autocomplete_sync_shs_submit';
   }
  }
 }
}


/**
 *  Implementation of Validate handler
 */
function autocomplete_sync_shs_autocomplete_shs_validate(&$form,&$form_state){
 $errors =  form_get_errors();
 form_clear_error();

 if (isset($form_state['values'])){
   foreach($form_state['values'][$form_state['values']['field-name']] as $k => $v){
     if($form_state['values'][$form_state['values']['field-name']][$k]['widget-selection'] == 0){
       $autocomplete_term = $form_state['values'][$form_state['values']['field-name']][$k]['autocomplete'];
       if (!empty($autocomplete_term)){
         foreach($errors as $name => $error){
           if ($name != $form_state['values']['field-name'].'][und]['.$k.'][tid'){
             form_set_error($name, $error);
           }
         }
       }
       $term = taxonomy_get_term_by_name($form_state['values'][$form_state['values']['field-name']]);
       foreach($term as $t_k => $t_v){
         $form_state['values'][$form_state['values']['field-name']] = $t_v->tid;
       }
     }  
     if($form_state['values'][$form_state['values']['field-name']][$k]['widget-selection'] == 1){
        $form_state['values'][$form_state['values']['field-name']] = $form_state['values'][$form_state['values']['field-name']][$k]['tid'];
     }  
   }
 } 
}

/**
 *  Implementation of Submit handler
 */
function autocomplete_sync_shs_autocomplete_sync_shs_submit(&$form,&$form_state){
  $field_name = $form['field-name']['#value'];
  foreach($form_state['values'][$field_name][LANGUAGE_NONE] as $k => $v){
    if (is_numeric($k)){
      $autocomplete_term = $v['autocomplete'];
      if (!empty($autocomplete_term)){
        $terms = taxonomy_get_term_by_name($autocomplete_term);
        reset($terms);
        $tid = key($terms);
        $form_state['values'][$field_name][LANGUAGE_NONE][$k]['tid'] = $tid;
      }
    }
  }
}

/**
 * Page callback: Outputs JSON for taxonomy autocomplete suggestions.
 *
 * This callback outputs term name suggestions in response to Ajax requests
 * made by the synonyms autocomplete widget for taxonomy term reference
 * fields. The output is a JSON object of plain-text term suggestions,
 * keyed by the user-entered value with the completed term name appended.
 * Term names containing commas are wrapped in quotes. The search is made
 * with consideration of synonyms.
 *
 * @param string $field_name
 *   The name of the term reference field.
 * @param string $entity_type
 *   Entity type to which the supplied $field_name is attached to
 * @param string $bundle
 *   Bundle name to which the supplied $field_name is attached to
 * @param string $tags_typed
 *   (optional) A comma-separated list of term names entered in the
 *   autocomplete form element. Only the last term is used for autocompletion.
 *   Defaults to '' (an empty string).
 */

function autocomplete_sync_shs_autocomplete_taxonomy_term($field_name, $entity_type, $bundle, $tags_typed = '') {
    module_load_include('inc','synonyms','synonyms.pages');
  // If the request has a '/' in the search text, then the menu system will have
  // split it into multiple arguments, recover the intended $tags_typed.
  $args = func_get_args();
  // Shift off the $field_name argument.
  array_shift($args);
  // Shift off the $entity_type argument.
  array_shift($args);
  // Shift off the $bundle argument.
  array_shift($args);
  $tags_typed = implode('/', $args);

  // Make sure the field exists and is a taxonomy field.
  if (!($field = field_info_field($field_name)) || $field['type'] != 'taxonomy_term_reference') {
    // Error string. The JavaScript handler will realize this is not JSON and
    // will display it as debugging information.
    print t('Taxonomy field @field_name not found.', array('@field_name' => $field_name));
    exit;
  }

  if (!($instance = field_info_instance($entity_type, $field['field_name'], $bundle))) {
    // Error string. The JavaScript handler will realize this is not JSON and
    // will display it as debugging information.
    print t('There was not found an instance of @field_name in @entity_type.', array(
      '@field_name' => $field_name,
      '@entity_type' => $entity_type,
    ));
    exit;
  }

  $widget = $instance['widget']['type'] == 'synonyms_autocomplete_taxonomy_term' ? $instance['widget']['settings'] : field_info_widget_settings('synonyms_autocomplete_taxonomy_term');

  // How many suggestions maximum we are able to output.
  $max_suggestions = $widget['suggestion_size'];

  // Whether we are allowed to suggest more than one entry per term, shall that
  // entry be either term name itself or one of its synonyms.
  $suggest_only_unique = $widget['suggest_only_unique'];

  // The user enters a comma-separated list of tags. We only autocomplete the
  // last tag.
  $tags_typed = drupal_explode_tags($tags_typed);
  $tag_last = drupal_strtolower(array_pop($tags_typed));

  $tags_typed_tids = array();
  if (!empty($tags_typed)) {
    $efq = new EntityFieldQuery();
    $efq->entityCondition('entity_type', 'taxonomy_term');
    $efq->propertyCondition('name', $tags_typed);
    $tags_typed_tids = $efq->execute();
    if (isset($tags_typed_tids['taxonomy_term'])) {
      $tags_typed_tids = array_keys($tags_typed_tids['taxonomy_term']);
    }
  }

  // Array of found suggestions. Each subarray of this array will represent a
  // single suggestion entry.
  // - tid: (int) tid of the suggested term
  // - name: (string) name of the suggested term
  // - synonym: (string) optional synonym string that matched this entry
  // - behavior_implementation: (array) optional behavior implementation that
  //   provided the synonym
  $tags_return = array();
  if ($tag_last != '') {
    // Part of the criteria for the query come from the field's own settings.
    $vocabularies = array();
    $tmp = taxonomy_vocabulary_get_names();
    foreach ($field['settings']['allowed_values'] as $tree) {
      $vocabularies[$tmp[$tree['vocabulary']]->vid] = $tree['vocabulary'];
    }
    $vocabularies = taxonomy_vocabulary_load_multiple(array_keys($vocabularies));
    
    // Firstly getting a list of tids that match by $term->name.
    $query = db_select('taxonomy_term_data', 't');
    $query->addTag('translatable');
    $query->addTag('term_access');

    // Do not select already entered terms.
    if (!empty($tags_typed_tids)) {
      $query->condition('t.tid', $tags_typed_tids, 'NOT IN');
    }
    // Select rows that match by term name.
    $result = $query
      ->fields('t', array('tid', 'name'))
      ->condition('t.vid', array_keys($vocabularies))
      ->condition('t.name', '%' . db_like($tag_last) . '%', 'LIKE')
      ->range(0, $max_suggestions)
      ->execute();
    foreach ($result as $v) {
      $children = taxonomy_get_children($v->tid);
      $parent_count   = count(taxonomy_get_parents_all($v->tid));
      if (empty($children) && $parent_count == 3){
        $tags_return[] = (array) $v;
      }
      
    }

    // Now we go vocabulary by vocabulary looking through synonym fields.
    foreach ($vocabularies as $vocabulary) {
      // Now we go a synonym field by synonym field gathering suggestions.
      $bundle = field_extract_bundle('taxonomy_term', $vocabulary);

      $behavior_implementations = synonyms_behavior_get('autocomplete', 'taxonomy_term', $bundle, TRUE);
      foreach ($behavior_implementations as $implementation) {
        $condition = db_and();
        $condition->condition(AbstractSynonymsBehavior::COLUMN_SYNONYM_PLACEHOLDER, '%' . db_like($tag_last) . '%', 'LIKE');

        if (!empty($tags_typed_tids)) {
          $condition->condition(AbstractSynonymsBehavior::COLUMN_ENTITY_ID_PLACEHOLDER, $tags_typed_tids, 'NOT IN');
        }
        if ($suggest_only_unique && !empty($tags_return)) {
          $tmp = array();
          foreach ($tags_return as $tag_return) {
            $tmp[] = $tag_return['tid'];
          }
          $condition->condition(AbstractSynonymsBehavior::COLUMN_ENTITY_ID_PLACEHOLDER, $tmp, 'NOT IN');
        }

        $new_tids = array();
        foreach ($implementation['object']->synonymsFind($condition) as $synonym) {
          if (!$suggest_only_unique || !in_array($synonym->entity_id, $new_tids)) {
            $tags_return[] = array(
              'tid' => $synonym->entity_id,
              'name' => '',
              'synonym' => $synonym->synonym,
              'behavior_implementation' => $implementation,
            );
            $new_tids[] = $synonym->entity_id;
          }
        }
      }
    }

    $synonym_terms = array();
    foreach ($tags_return as $v) {
      if (isset($v['synonym'])) {
        $synonym_terms[] = $v['tid'];
      }
    }

    if (!empty($synonym_terms)) {
      $synonym_terms = taxonomy_term_load_multiple($synonym_terms);
      foreach ($tags_return as &$v) {
        if (isset($v['synonym'])) {
          $entity_ids = entity_extract_ids('taxonomy_term', $synonym_terms[$v['tid']]);
          $v['name'] = $synonym_terms[$v['tid']]->name;
          $v['bundle'] = $entity_ids[2];
        }
      }
    }
    if (count($tags_return) > $max_suggestions) {
      $tags_return = array_slice($tags_return, 0, $max_suggestions);
    }
  }
  $prefix = empty($tags_typed) ? '' : drupal_implode_tags($tags_typed) . ', ';
  drupal_json_output(synonyms_autocomplete_format($tags_return, $prefix));
}


